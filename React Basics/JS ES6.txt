Javascript ES6

1)let const:- let is use as var

2)arrow functions:- 
 this keyword is expect what we really expect to and with arrow fuction it will work consist and not change with runtime

function printMyName = (name) => { //passes name as a argument
console.log(name);
}
printMyName('RG');


const printMyName = () => { //with no argument
console.log('RG');
}
printMyName();

const printMyName = (name ,age) => { //with max argument
console.log(name ,age);
}
printMyName('RG',25);

const multiply = (number) => {
return number * 2 ;
}
console.log(multiply(2));

3)export and import :- default export to {named export}

4)classes :-
//classes is blueprint of js object
class Human {
    constructor(){
        this.gender = 'male'; //property
    }
    printGender(){
        console.log(this.gender) ;//method
    }
}
class Person extends Human{   //person inheritas Human(property and method)
    constructor (){
        super(); //it will initialise parent constructor with parent class,it is used when we extends any class with constrcutor
        this.name = 'RG'
    }
    printMyName(){
        console.log(this.name);
    }
}
const person = new Person(); //object instance created then it call constructor
person.printMyName();
person.printGender();


5)classes,properties and Methods
properties are like variables attache to classes/object
ES6 :- 
constructor(){
this.myProperty = 'value'
}

ES7 :- 
myProperty = 'value'

methods are like functions attache to classes/object
ES6 :-
myMothod(){..}
ES7:-
myMethod = () => {..}


class Human {
    
        gender = 'male'; //property
    
    printGender = () => {
        console.log(this.gender) ;//method
    }
}
class Person extends Human{   //person inheritas Human(property and method)
    
        name = 'RG'
    
    printMyName = () => {
        console.log(this.name);
    }
}
const person = new Person(); //object instance created then it call constructor
person.printMyName();
person.printGender();

7) Spread & Rest Operators
 ...
spread - used to split up (pulled out )array elements OR object properties

const newArray = [...oldArray ,1,2]
const newObject = {...oldObject, newProp:5}

array
const numbers = [1,2,3];
const newNumbers = [...numbers,4]; //if we dont put spread then it will put                                     one element into another
console.log(newNumbers);

object
const person = {
    name: 'RG'
};
const newPerson = {
    ...person,
    age:25
}
console.log(newPerson);

Rest - used to merge a list of function arguments into an array

function sortArgs(..args){
returns args.sort()
}

const filter = (...args) => {
    return args.filter(el => el === 1);
}
console.log(filter(1,2,3));   //output =1

8) Destructuring- easily extract array elementnor object properties and store them in variable(pull out single element)
array-
[a,b]=['Hello','Max']
console.log(a)//Hello
console.log(b)//Max

const numbers= [1,2,3];
[num1, ,num3]=numbers;
console.log(num1,num3);

Object-
{name}={name:'Max',age:28}
console.log(name)//Max
console.log(age)//undefined

9)Reference and Primitive Types 
number ,string ,boolean is primitive type

const number =1;
const num2 = number;
console.log(num2)

 wherever you reassigned or store a variable in another variable it will copy the value.

objects and array is reference type
//objects and array are reference types, if you reassigned them you are copying the pointer not value
//therefore if tou want to do this in real copy, you will have to create a new object and just copy the //properties and not the entire object
const person = {
    name: 'Max'
};
// const secondPerson = person; //assiged person as value.
const secondPerson = {  //using a spread opeartion it will print Max and we creat a real copy
    ...person
};
person.name = 'Manu';
//after assign name manu it will print Manu,beause its just copied the pointer and points to exact same object in memory as person does.

console.log(secondPerson);
//Person the object is stored in memory and in the constant person we store a pointer to that place in memory.and if we then assign person to secondPerson that pointer will be copied.

//if you copy objects or array like this becuase you then may manipulate one object in one place in app
//and accidently manipulate another usage of the same object in another place of app
//therfore we learn to copy this in an immutable way which means we copy that by really copying the object and not just a pointer for that we acn use this spread operator

10) Array Method

const numbers = [1,2,3];
const doubleNumArray = numbers.map(( num ) => { //take a function as input
   return  num*2 ;
});
console.log(numbers);
console.log(doubleNumArray);
//in map function we have to return the new  value we want to turn the old one into.
//it will return 2,4,6, and map all the returns a new array ,a real new arrya which is then stored in
///doubleNumArray
refer MDN web docs for array



React:-
React Core Syntax & JSX
working with components
working with data

React is Javascript liabrary for building user Interfaces.
components- reusable building blocks in your user interface.(Html(simple Code)+Css(style)+Javascript(logic)
why components - Reusability and separation of Concerns.
work with functions and splite code into small functions.
react allows you to create re-usable and reactive components
React - declarative approach